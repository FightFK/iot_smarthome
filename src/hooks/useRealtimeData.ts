"use client";

import { useState, useEffect, useCallback } from "react";

interface SensorData {
  type: "sensor";
  roomId: number;
  temp: number;
  humidity: number;
  timestamp: string;
}

interface MotionData {
  type: "motion";
  roomId: number;
  roomName: string;
  timestamp: string;
}

type RealtimeMessage = SensorData | MotionData | {
  type: "initial";
  data: { [key: string]: any };
};

export function useRealtimeData(wsUrl: string = "ws://localhost:8080") {
  const [realtimeData, setRealtimeData] = useState<{ [key: string]: any }>({});
  const [isConnected, setIsConnected] = useState(false);
  const [latestMotion, setLatestMotion] = useState<MotionData | null>(null);

  useEffect(() => {
    let ws: WebSocket | null = null;
    let reconnectTimeout: NodeJS.Timeout;

    const connect = () => {
      try {
        ws = new WebSocket(wsUrl);

        ws.onopen = () => {
          console.log("üåê WebSocket connected");
          setIsConnected(true);
        };

        ws.onmessage = (event) => {
          try {
            const message: RealtimeMessage = JSON.parse(event.data);

            if (message.type === "initial") {
              // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              console.log("üì¶ Received initial data:", message.data);
              setRealtimeData(message.data);
            } else if (message.type === "sensor") {
              // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor
              const sensorMsg = message as SensorData;
              console.log(`üìä Sensor update - Room ${sensorMsg.roomId}:`, sensorMsg);
              setRealtimeData((prev) => ({
                ...prev,
                [`room_${sensorMsg.roomId}`]: sensorMsg,
              }));
            } else if (message.type === "motion") {
              // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• motion
              const motionMsg = message as MotionData;
              console.log(`üö∂ Motion detected - Room ${motionMsg.roomId}: ${motionMsg.roomName}`);
              setRealtimeData((prev) => ({
                ...prev,
                [`motion_${motionMsg.roomId}`]: motionMsg,
              }));
              // ‡πÄ‡∏Å‡πá‡∏ö motion ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á notification
              setLatestMotion(motionMsg);
            }
          } catch (err) {
            console.error("‚ùå Error parsing WebSocket message:", err);
          }
        };

        ws.onerror = (error) => {
          console.error("‚ùå WebSocket error:", error);
        };

        ws.onclose = () => {
          console.log("üîå WebSocket disconnected, reconnecting in 3 seconds...");
          setIsConnected(false);
          // Reconnect after 3 seconds
          reconnectTimeout = setTimeout(connect, 3000);
        };
      } catch (err) {
        console.error("‚ùå Failed to create WebSocket:", err);
        reconnectTimeout = setTimeout(connect, 3000);
      }
    };

    connect();

    return () => {
      if (ws) {
        ws.close();
      }
      if (reconnectTimeout) {
        clearTimeout(reconnectTimeout);
      }
    };
  }, [wsUrl]);

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á
  const getLatestSensorData = useCallback(
    (roomId: number) => {
      const data = realtimeData[`room_${roomId}`];
      if (data && data.type === "sensor") {
        return {
          temp: data.temp,
          humidity: data.humidity,
          timestamp: data.timestamp,
        };
      }
      return null;
    },
    [realtimeData]
  );

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ motion ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const hasMotion = useCallback(
    (roomId: number) => {
      const data = realtimeData[`motion_${roomId}`];
      if (data && data.type === "motion") {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ motion ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const motionTime = new Date(data.timestamp).getTime();
        const now = new Date().getTime();
        const diff = now - motionTime;
        return diff < 60 * 1000; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏°‡∏µ motion
      }
      return false;
    },
    [realtimeData]
  );

  return {
    realtimeData,
    isConnected,
    getLatestSensorData,
    hasMotion,
    latestMotion, // ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å motion ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á notification
  };
}
