import "dotenv/config";
import mqtt from "mqtt";
import { WebSocketServer } from "ws";
import { supabaseServer } from "@/libs/supabaseServer";
import type {
  MqttSensorData,
  MqttMotionData,
  RoomMap,
} from "@/types/mqtt.types";

function startMqttWorker() {
  console.log("üîå Connecting to MQTT broker...");
  console.log(`üìç Host: ${process.env.MQTT_HOST}:${process.env.MQTT_PORT}`);
  console.log(`üë§ Username: ${process.env.MQTT_USERNAME}`);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á WebSocket Server ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• real-time
  const wss = new WebSocketServer({ port: 8080 });
  console.log("üåê WebSocket server started on port 8080");

  const client = mqtt.connect(`mqtt://${process.env.MQTT_HOST}:${process.env.MQTT_PORT}`, {
    username: process.env.MQTT_USERNAME,
    password: process.env.MQTT_PASSWORD,
    connectTimeout: 30000,
    reconnectPeriod: 1000,
    keepalive: 60,
    clean: true,
  });

  console.log("‚è≥ Waiting for connection...");

  let roomMap: RoomMap = {};

  // Save Data Buffers (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å DB ‡∏ó‡∏∏‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ)
  let bufferTempHum: any[] = [];
  // Motion ‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ buffer

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö WebSocket clients ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á connect)
  const latestData: { [key: string]: any } = {};

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á WebSocket clients ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const broadcastToClients = (data: any) => {
    const message = JSON.stringify(data);
    wss.clients.forEach((client) => {
      if (client.readyState === 1) { // OPEN state
        client.send(message);
      }
    });
  };

  // When Connected
  client.on("connect", async () => {
    console.log("‚úÖ MQTT Connected");

    roomMap = await getRoomMap();
    console.log("üó∫Ô∏è Room map:", roomMap);

    Object.keys(roomMap).forEach((room) => {
      client.subscribe(`home/${room}/data`, (err) => {
        if (err) console.error(`‚ùå Subscribe error (${room}/data):`, err);
        else console.log(`üì• Subscribed to home/${room}/data`);
      });
      client.subscribe(`home/${room}/motion`, (err) => {
        if (err) console.error(`‚ùå Subscribe error (${room}/motion):`, err);
        else console.log(`üì• Subscribed to home/${room}/motion`);
      });
    });

    // ‡∏ï‡∏±‡πâ‡∏á interval ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Temp/Humidity ‡∏ó‡∏∏‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ
    setInterval(async () => {
      try {
        if (bufferTempHum.length > 0) {
          console.log(`üíæ Saving ${bufferTempHum.length} Temp/Humidity records to DB...`);
          await supabaseServer.from("Temp_Humidity").insert(bufferTempHum);
          bufferTempHum = [];
        }
        // Motion ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ buffer ‡πÅ‡∏•‡πâ‡∏ß - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô
      } catch (err) {
        console.error("‚ùå Error during batch insert:", err);
      }
    }, 30 * 60 * 1000); // 30 minutes
  });

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å MQTT
  client.on("message", async (topic, message) => {
    try {
      const messageData = JSON.parse(message.toString());
      const match = topic.match(/home\/(.*?)\//);
      const roomKey = match ? match[1] : null;
      if (!roomKey || !roomMap[roomKey]) {
        console.warn(`‚ö†Ô∏è Unknown room: ${roomKey}`);
        return;
      }

      const roomId = roomMap[roomKey];

      if (topic.includes("/data")) {
        const data = messageData as MqttSensorData;
        
        // ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô buffer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å DB ‡∏ó‡∏∏‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ
        bufferTempHum.push({
          room_id: roomId,
          temp: data.temp,
          humidity: data.hum,
          timestamp: data.timestamp,
        });

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        latestData[`room_${roomId}`] = {
          type: "sensor",
          roomId,
          temp: data.temp,
          humidity: data.hum,
          timestamp: data.timestamp,
        };

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• real-time ‡πÑ‡∏õ‡∏¢‡∏±‡∏á WebSocket clients
        broadcastToClients(latestData[`room_${roomId}`]);
        console.log(`üìä Real-time: Room ${roomId} - Temp: ${data.temp}¬∞C, Humidity: ${data.hum}%`);
      }

      if (topic.includes("/motion")) {
        const data = messageData as MqttMotionData;
        
        // ‚ö° ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Motion ‡∏•‡∏á DB ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏≠ 30 ‡∏ô‡∏≤‡∏ó‡∏µ)
        try {
          await supabaseServer.from("Motion").insert({
            room_id: roomId,
            time_motion: data.timestamp,
          });
          console.log(`üíæ Motion saved immediately - Room ${roomId}`);
        } catch (err) {
          console.error("‚ùå Error saving motion:", err);
        }

        // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á
        const roomName = await getRoomName(roomId);

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• motion real-time ‡πÑ‡∏õ‡∏¢‡∏±‡∏á WebSocket clients
        const motionData = {
          type: "motion",
          roomId,
          roomName, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á notification
          timestamp: data.timestamp,
        };
        
        latestData[`motion_${roomId}`] = motionData;
        broadcastToClients(motionData);
        console.log(`üö∂ Real-time: ${roomName} - Motion detected at ${data.timestamp}`);
      }
    } catch (err) {
      console.warn("‚ö†Ô∏è Error parsing or buffering:", err);
    }
  });

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ WebSocket client ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  wss.on("connection", (ws) => {
    console.log("üë§ New WebSocket client connected");

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ client ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á connect
    ws.send(JSON.stringify({
      type: "initial",
      data: latestData,
    }));

    ws.on("close", () => {
      console.log("üëã WebSocket client disconnected");
    });

    ws.on("error", (error) => {
      console.error("‚ùå WebSocket client error:", error);
    });
  });

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ client ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡πÄ‡∏ä‡πà‡∏ô control commands)
  wss.on("message", (ws, message) => {
    try {
      const data = JSON.parse(message.toString());
      console.log("üì® Received from WebSocket client:", data);
    } catch (err) {
      console.error("‚ùå Error parsing WebSocket message:", err);
    }
  });

  process.on("SIGINT", async () => {
    console.log("\nüëã Flushing buffers before exit...");
    try {
      if (bufferTempHum.length > 0)
        await supabaseServer.from("Temp_Humidity").insert(bufferTempHum);
      // Motion ‡πÑ‡∏°‡πà‡∏°‡∏µ buffer ‡πÅ‡∏•‡πâ‡∏ß - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    } catch (err) {
      console.error("‚ùå Error flushing buffers:", err);
    }
    client.end();
    wss.close();
    process.exit(0);
  });
}

async function getRoomMap(): Promise<RoomMap> {
  const { data, error } = await supabaseServer.from("Room").select("room_id, room_name");
  if (error) throw error;
  const map: RoomMap = {};
  data.forEach((r) => {
    map[`room${r.room_id}`] = r.room_id;
  });
  return map;
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á
async function getRoomName(roomId: number): Promise<string> {
  const { data, error } = await supabaseServer
    .from("Room")
    .select("room_name")
    .eq("room_id", roomId)
    .single();
  
  if (error || !data) return `Room ${roomId}`;
  return data.room_name;
}

// üöÄ Start worker
startMqttWorker();
